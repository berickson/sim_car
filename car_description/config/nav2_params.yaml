amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.2 # Expected process noise in odometry’s rotation estimate from rotation.
    alpha2: 0.2 # Expected process noise in odometry’s rotation estimate from translation.
    alpha3: 0.2 # Expected process noise in odometry’s translation estimate from translation.
    alpha4: 0.2 # Expected process noise in odometry’s translation estimate from rotation.
    alpha5: 0.2 # For Omni models only: translation noise.
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: -1.0 # Maximum scan range to be considered, -1.0 will cause the laser’s reported maximum range to be used.
    laser_min_range: -1.0 # Minimum scan range to be considered, -1.0 will cause the laser’s reported minimum range to be used.
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "differential"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: car/odom
    bt_loop_duration: 10
    default_server_timeout: 20
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    # default_nav_to_pose_bt_xml: /opt/ros/galactic/share/nav2_bt_navigator/behavior_trees/navigate_w_replanning_time.xml
    default_nav_to_pose_bt_xml: /home/brian/sim_ws/src/sim_car/car_description/behavior_trees/navigate_w_replanning_time2.xml
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    odom_topic: car/odom
    controller_frequency: 10.0 
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::StoppedGoalChecker"
      xy_goal_tolerance: 0.1
      yaw_goal_tolerance: 3.14
      trans_stopped_velocity: 0.03


    # Line following controller
    FollowPath:
      plugin: "nav2_line_following_controller::LineFollowingController"
      max_velocity: 0.5               # m/s
      max_reverse_velocity: 0.25       # m/s
      max_acceleration: 1.0           # m/s^2
      max_deceleration: 1.0           # m/s^2
      max_lateral_acceleration: 1.0   # m/s^2
      lookahead_distance: 1.0         # meters
      min_turn_radius: 0.4            # meters
      transform_tolerance: 0.1        # maximum age of tf in seconds to be considered valid
      steering_k_p: 20.0               # pid tuning for steering, distance from path
      steering_k_d: 10.0               # pid tuning for steering, angle from path


    # RPP
    # FollowPath:
    #   plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
    #   allow_reversing: true
    #   approach_velocity_scaling_dist: 0.6
    #   cost_scaling_dist: 0.6
    #   cost_scaling_gain: 1.0
    #   desired_linear_vel: 0.5
    #   inflation_cost_scaling_factor: 3.0
    #   lookahead_dist: 0.6
    #   lookahead_time: 1.5
    #   max_allowed_time_to_collision_up_to_carrot: 1.0
    #   max_angular_accel: 3.2
    #   max_lookahead_dist: 0.9
    #   max_robot_pose_search_dist: 1.4875
    #   min_approach_linear_velocity: 0.05
    #   min_lookahead_dist: 0.3
    #   regulated_linear_scaling_min_radius: 0.9
    #   regulated_linear_scaling_min_speed: 0.25
    #   transform_tolerance: 0.1
    #   use_cost_regulated_linear_velocity_scaling: true
    #   use_interpolation: true
    #   use_regulated_linear_velocity_scaling: true
    #   use_rotate_to_heading: false
    #   use_velocity_scaled_lookahead_dist: false
      
controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 5.0
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: False
      rolling_window: true
      width: 6
      height: 6
      resolution: 0.1 
      footprint: "[ [-0.05, 0.15], [0.40,0.15], [0.40,-0.15], [0.15,-0.15], [-0.05,-0.15] ]"
      footprint_padding: 0.0
      #plugins: ["static_layer", "inflation_layer", "obstacle_layer"]
      plugins: ["obstacle_layer", "inflation_layer" ]
      #static_layer:
      #  plugin: "nav2_costmap_2d::StaticLayer"
      #   map_subscribe_transient_local: False
      #   map_topic: /map
      #   enabled: True
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          sensor_frame: laser_scanner_link
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.2
          obstacle_max_range: 5.0
          obstacle_min_range: 0.2        
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55
        enabled: True
      always_send_full_costmap: True


global_costmap:
  global_costmap:
    ros__parameters:
      width: 10
      height: 10
      update_frequency: 0.2
      publish_frequency: 0.2
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: False
      # robot_radius: 0.32
      footprint: "[ [-0.05, 0.15], [0.40,0.15], [0.40,-0.15], [0.15,-0.15], [-0.05,-0.15] ]"
      footprint_padding: 0.05

      resolution: 0.05
      track_unknown_space: false # bke
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          sensor_frame: laser_scanner_link
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.2
          obstacle_max_range: 5.0
          obstacle_min_range: 0.2
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.0
        inflation_radius: 4.0
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "turtlebot3_world.yaml"

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 20.0
#     use_sim_time: False
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_navfn_planner/NavfnPlanner"
#       tolerance: 0.5
#       use_astar: false
#       allow_unknown: true

planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]
    use_sim_time: False
    

    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      downsample_costmap: false           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: true                 # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_planning_time: 5.0              # max time in s for planner to plan, smooth
      motion_model_for_search: "REEDS_SHEPP"    # Hybrid-A* Dubin, Redds-Shepp
      angle_quantization_bins: 72         # Number of angle bins for search
      analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
      minimum_turning_radius: 1.0        # minimum turning radius in m of path / vehicle
      reverse_penalty: 50.0                # Penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.0                 # Penalty to apply if motion is changing directions (L to R), must be >= 0
      non_straight_penalty: 1.2           # Penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 3.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      smooth_path: False # was True                   # If true, does a simple and quick smoothing post-processing to the path

      smoother:
        max_iterations: 1000
        w_smooth: 0.1 # was 0.3
        w_data: 0.3 # was 0.2
        tolerance: 1e-10
        do_refinement: true

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: [ "backup", "wait"]
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_footprint
    transform_timeout: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False


velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0             # Hz
    scale_velocities: true                # true = adjust angular to keep same trajectory
    feedback: "OPEN_LOOP"                 # CLOSED_LOOP means use velocities from odom, odom must be high rate compared to smoothing_frequency
    max_velocity: [5.0, 0.0, 92.5]         # x, y, theta
    min_velocity: [-5.0, 0.0, -92.5]       # x, y, theta, maximum reverse velocities (should be negative)
    deadband_velocity: [0.0, 0.0, 0.0]    # velocities less than this will be translted to zero
    velocity_timeout: 1.0                 # if no cmd_vel is sent after this time, zeros will be sent
    max_accel: [2.5, 0.0, 933.2]
    max_decel: [-2.5, 0.0, -933.2]
    odom_topic: "car/odom"                    # topic for closed loop velocities
    odom_duration: 0.1                    # time to buffer odometry to esimate speed

slam_toolbox:
  ros__parameters:
    minimum_travel_distance: 0.01
    minimum_travel_heading: 0.01
    map_update_interval: 1.0
    loop_search_maximum_distance: 0.5
    


waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"   
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200
